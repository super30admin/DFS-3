//Timecomplexity.   4^n. (4 choices)
//SpaceComplexity.  O'(n)


class Solution {
    public boolean makesquare(int[] matchsticks) {
        
        Arrays.sort(matchsticks);
        reverse(matchsticks);
       

        int sum = 0;

        for(int num : matchsticks){
            sum += num;
        }
        if(sum%4 != 0)return false;

        int[] square = new int[4];

        return backtrack(matchsticks,square, 0, sum/4);
    }

    public boolean backtrack(int[] matchsticks, int[] square, int i, int side){

        if(square[0] == side && square[1] == side && square[2] == side )return true;

        

            
            for(int j = 0; j < 4; j++){

                if(square[j] + matchsticks[i] <= side){

                    //action
                    square[j] += matchsticks[i];

                    //recurse
                    if(backtrack(matchsticks,square,i+1,side)) return true;

                    //backtrack
                    square[j] -= matchsticks[i];

                
                
            }
           
        }
        return false;
    }

    public void reverse(int[] arr){

      int low = 0;
      int high = arr.length-1;

      while(low < high){
          int temp = arr[low];
          arr[low] = arr[high];
          arr[high] = temp;
          low++;
          high--;
      }
       

        
    }
}
